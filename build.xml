<!--
	Drifting Souls 2
 	Copyright (c) 2006 Christopher Jung

 	This library is free software; you can redistribute it and/or
 	modify it under the terms of the GNU Lesser General Public
 	License as published by the Free Software Foundation; either
 	version 2.1 of the License, or (at your option) any later version.

 	This library is distributed in the hope that it will be useful,
 	but WITHOUT ANY WARRANTY; without even the implied warranty of
 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 	Lesser General Public License for more details.

 	You should have received a copy of the GNU Lesser General Public
 	License along with this library; if not, write to the Free Software
 	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<project name="Drifting Souls 2" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- ===================== Property Definitions =========================== -->

	<property file="build.properties"/>
	<property file="${user.home}/build.properties"/>


	<!-- ==================== File and Directory Names ======================== -->

	<property name="app.name"      value="driftingsouls"/>
	<property name="app.path"      value="/${app.name}"/>
	<property name="app.version"   value="2"/>
	<property name="build.home"    value="${basedir}/build"/>
	<property name="manager.url"   value="http://localhost:8080/manager"/>
	<property name="src.home"      value="${basedir}/src"/>
	<property name="src.tests"      value="${basedir}/test/java"/>
	<property name="web.home"      value="${basedir}/web"/>
	<property name="ds2.configdir" value="${basedir}/web/WEB-INF/cfg/"/>
	<property name="templates.srchome" value="${build.home}/templates"/>
	<property name="templates.compiledir" value="${templates.srchome}/net/driftingsouls/ds2/server/templates" />
	<property name="jetty.contextpath" value="/driftingsouls"/>
	<property name="jetty.jvmargs" value="-DdummyDaLeereArgsNichtFunktionieren"/>
	<property name="jetty.jmxport"    value="8008"/>
	<property name="jetty.debugport"    value="8000"/>
	<property name="jetty.port"    value="8080"/>

	<!--  ==================== Compilation Control Options ==================== -->

	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>

	<!-- ==================== External Dependencies =========================== -->

	<!-- ==================== Compilation Classpath =========================== -->

	<path id="compile.classpath">
		<fileset dir="build-utils/lib">
			<include name="*.jar"/>
		</fileset>

		<fileset dir="${build.home}/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<fileset dir="build-utils/lib">
			<include name="*.jar"/>
		</fileset>

		<fileset dir="${build.home}/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>

		<fileset dir="${build.home}/test/lib">
			<include name="*.jar"/>
		</fileset>

		<pathelement location="${build.home}/WEB-INF/classes"/>
	</path>

	<!-- ================== Custom Ant Task Definitions ======================= -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="build-utils/ivy/ivy-2.3.0.jar" />

	<!-- ==================== All Target ====================================== -->

	<target name="all" depends="clean,compile"
		description="Clean build and dist directories, then compile"/>

	<!-- ==================== Clean Target ==================================== -->

	<target name="clean" description="Delete old build and dist directories">
		<delete failonerror="false">
			<fileset dir="${build.home}">
				<exclude name="**/data/**" />
			</fileset>
		</delete>
		<delete failonerror="false" dir="${build.home}/data/javascript" />
		<delete failonerror="false" dir="${build.home}/data/css" />
		<delete failonerror="false" dir="${build.home}/WEB-INF" />
		<delete failonerror="false" dir="${templates.compiledir}" />
	</target>


	<!-- ==================== Prepare Target ================================== -->

	<target name="prepare">
		<mkdir  dir="${build.home}"/>
		<mkdir  dir="${build.home}/WEB-INF"/>
		<mkdir  dir="${build.home}/WEB-INF/classes"/>

		<copy todir="${build.home}">
			<fileset dir="${web.home}" followsymlinks="false"/>
		</copy>

		<mkdir dir="${build.home}/WEB-INF/lib"/>

		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${src.home}" excludes="**/*.java"/>
		</copy>
	</target>

	<!-- ==================== resolve Targets ================================== -->

	<target name="resolve" depends="prepare">
		<ivy:settings file="build-utils/ivy/ivysettings.xml" />
		<ivy:retrieve inline="false" type="jar" conf="compile" pattern="${build.home}/WEB-INF/lib/[artifact]-[revision].[ext]" overwriteMode="always"/>
        <ivy:retrieve inline="false" type="bundle" conf="compile" pattern="${build.home}/WEB-INF/lib/[artifact]-[revision].[ext]" overwriteMode="always"/>

		<ivy:retrieve inline="false" type="jar" conf="test" pattern="${build.home}/test/lib/[artifact]-[revision].[ext]" overwriteMode="always"/>
		<ivy:retrieve inline="false" type="bundle" conf="test" pattern="${build.home}/test/lib/[artifact]-[revision].[ext]" overwriteMode="always"/>
	</target>

	<!-- ==================== Antlr Target ================================== -->

	<target name="antlr" depends="resolve">
		<echo>Compiliere Grammatik Role.g</echo>
		<java classname="org.antlr.Tool" fork="true">
			<arg value="-o ${src.home}/net/driftingsouls/ds2/server/scripting/roles/parser" />
			<arg value="${src.home}/net/driftingsouls/ds2/server/scripting/roles/parser/Role.g" />
			<classpath refid="compile.classpath" />
		</java>
	</target>

	<!-- ==================== Compile Targets ================================== -->

	<!-- ==================== compile-ds Target ================================== -->
	<target name="compile-ds" depends="antlr" description="Generate Hibernate Metamodel">
		<delete dir="${build.home}/_generated" />
		<mkdir dir="${build.home}/_generated" />
		<javac srcdir="${src.home}"
			   destdir="${build.home}/_generated"
			   debug="${compile.debug}"
			   deprecation="${compile.deprecation}"
			   optimize="${compile.optimize}"
			   source="1.8"
			   target="1.8"
			   encoding="UTF-8">
			<classpath refid="compile.classpath"/>
			<compilerarg value="-AfullyAnnotationConfigured=true" />
			<compilerarg value="-proc:only" />
			<compilerarg value="-parameters" />
		</javac>
		<javac debug="${compile.debug}"
			   deprecation="${compile.deprecation}"
			   destdir="${build.home}/WEB-INF/classes"
			   optimize="${compile.optimize}"
			   source="1.8"
			   target="1.8"
			   encoding="UTF-8">
			<src path="${build.home}/_generated" />
			<src path="${src.home}" />
			<classpath refid="compile.classpath"/>
			<compilerarg value="-proc:none" />
			<compilerarg value="-parameters" />
		</javac>
	</target>

	<!-- ==================== Template Target ================================== -->

	<target name="templates" depends="prepare,compile-ds">
		<mkdir dir="${templates.compiledir}"/>
		<java classname="net.driftingsouls.ds2.server.framework.templates.TemplateCompiler" fork="true">
			<arg value="${ds2.configdir}" />
			<arg value="${basedir}/templates" />
			<arg value="${templates.compiledir}" />
			<arg value="${build.home}/WEB-INF/classes" />
			<classpath>
				<pathelement path="${build.home}/WEB-INF/classes" />
			</classpath>
			<classpath refid="compile.classpath" />
		</java>
	</target>

	<target name="compile" depends="compile-ds,templates" description="Compile meta target">
	</target>

	<!-- ==================== jar Target ===================================== -->
	<target name="jar" depends="templates,compile" description="Create a jar">
		<delete file="${build.home}/WEB-INF/classes/META-INF/ds.version" />
		<tstamp>
			<format property="touch.time" pattern="yyyy-MM-dd HH:mm"/>
		</tstamp>

		<exec dir="${basedir}" executable="git" failonerror="false" failifexecutionfails="false" outputproperty="git-version">
			<arg line="rev-parse HEAD"/>
		</exec>

		<echo file="${build.home}/WEB-INF/classes/META-INF/ds.version" append="false">build-time=${touch.time}${line.separator}git-version=${git-version}${line.separator}bamboo-build=${bamboo.build}</echo>

		<jar jarfile="${build.home}/WEB-INF/lib/${app.name}.jar" basedir="${build.home}/WEB-INF/classes" />
	</target>

	<!-- ==================== Javascript Target ================================== -->

	<target name="javascript" depends="prepare">
		<concat destfile="${build.home}/data/javascript/ds_concat.js" append="false">
			<!--Erst die sonstigen Libs, dann common und zum Schluss modules -
				nach dem Komprimieren kommt JQuery an den Anfang (da bereits minimiert) -->
			<fileset dir="${build.home}/data/javascript/libs"
				includes="*.js"
				excludes="jquery-1.8.2.min.js,jquery-ui-1.9.1.min.js"/>
			<fileset dir="${build.home}/data/javascript/common"
				includes="*.js"/>
			<fileset dir="${build.home}/data/javascript/modules"
				includes="*.js"/>
		</concat>

		<java jar="build-utils/requirejs/compiler.jar" fork="true" failonerror="true">
			<arg value="--js" />
			<arg value="${build.home}/data/javascript/ds_concat.js" />
			<arg value="--js_output_file" />
			<arg value="${build.home}/data/javascript/ds_compressed.js" />
			<arg value="--language_in" />
			<arg value="ECMASCRIPT5" />
		</java>

		<concat destfile="${build.home}/data/javascript/ds.js" append="false">
			<fileset file="${build.home}/data/javascript/libs/jquery-1.8.2.min.js" />
			<fileset file="${build.home}/data/javascript/libs/jquery-ui-1.9.1.min.js" />
			<fileset file="${build.home}/data/javascript/ds_compressed.js" />
		</concat>

		<delete file="${build.home}/data/javascript/ds_concat.js" />
		<delete file="${build.home}/data/javascript/ds_compressed.js" />
	</target>

	<!-- ==================== Javascript Target ================================== -->

	<target name="css" depends="prepare">
		<concat destfile="${build.home}/data/css/format_concat.js" append="false">
			<fileset dir="${build.home}/data/css/common" includes="*.css"/>
		</concat>

		<java jar="build-utils/yuicompressor/yuicompressor-2.4.7.jar" fork="true" failonerror="true">
			<arg value="--type" />
			<arg value="css" />
			<arg value="-o" />
			<arg value="${build.home}/data/css/format.css" />
			<arg value="${build.home}/data/css/format_concat.js" />
		</java>

		<delete file="${build.home}/data/css/format_concat.js" />
	</target>

	<!-- ==================== Check-Install Target ================================== -->

	<target name="check-install" depends="prepare,compile">
		<java classname="net.driftingsouls.ds2.server.install.CheckInstallation" fork="true" dir="${build.home}">
			<jvmarg value="-Xmx512m" />
			<classpath>
				<pathelement path="${build.home}/WEB-INF/classes" />
			</classpath>
			<classpath refid="compile.classpath" />
		</java>
	</target>

	<!-- ==================== Run Target ================================== -->

	<target name="run">
		<mkdir dir="jetty-temp" />
		<mkdir dir="${build.home}/embedded" />

		<javac srcdir="${basedir}/build-utils/jetty/src"
			destdir="${build.home}/embedded"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}"
			source="1.8"
			target="1.8"
			encoding="UTF-8"
			verbose="true">
			<classpath>
				<fileset dir="${basedir}/build-utils/jetty/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<compilerarg value="-parameters" />
		</javac>

		<java classname="net.driftingsouls.ds2.server.embedded.RunEmbedded" fork="true">
			<classpath>
				<fileset dir="${basedir}/build-utils/jetty/lib">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${build.home}/embedded"/>
			</classpath>
			<arg value="${build.home}" />
			<jvmarg value="${jetty.jvmargs}" />
			<jvmarg value="-DDS_PORT=${jetty.port}" />
			<jvmarg value="-Dcom.sun.management.jmxremote" />
			<jvmarg value="-Dcom.sun.management.jmxremote.authenticate=false" />
			<jvmarg value="-Dcom.sun.management.jmxremote.port=${jetty.jmxport}" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jetty.debugport},server=y,suspend=n" />
			<jvmarg value="-Xdebug" />
			<jvmarg value="-server" />
			<jvmarg value="-Xms586m" />
			<jvmarg value="-Xmx586m" />
		</java>
		<delete dir="jetty-temp" />
	</target>

	<!-- ==================== CI-Prepare Target ================================== -->

	<target name="ci-prepare" description="Vorbereitende Massnahmen fuer einen Lauf in einem Continuous Integration System">
		<exec executable="/usr/local/bin/ci-prepare.sh" failonerror="true" />
	</target>

	<!-- ==================== Checkstyle Target ================================== -->

	<path id="checkstyle.classpath">
		<fileset dir="${build.home}/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${build.home}/WEB-INF/classes"/>
		<fileset dir="build-utils/checkstyle" includes="checkstyle-all-5.0-beta01.jar" />
	</path>

	<taskdef resource="checkstyletask.properties" classpath="build-utils/checkstyle/checkstyle-all-5.0-beta01.jar"/>

	<target name="checkstyle" description="Ueberprueft die Konformitaet mit dem Codestyle-Vorgaben" depends="compile">
		<checkstyle config="${basedir}/build-utils/checkstyle/ds.xml" classpathref="checkstyle.classpath">
			<fileset dir="${src.home}">
				<include name="net/**/*.java" />
				<exclude name="**/RoleParser.java" />
				<exclude name="**/RoleLexer.java" />
			</fileset>

			<!-- Location of cache-file. Something that is project specific -->
			<property key="checkstyle.cache.file" file="${build.home}/checkstyle.cache"/>

			<formatter type="plain"/>
			<formatter type="xml" toFile="${build.home}/checkstyle.result.xml"/>
		</checkstyle>
	</target>

	<!-- ==================== Test Target ================================== -->

	<target name="test" depends="compile">
		<mkdir dir="${build.home}/test" />
		<mkdir dir="${build.home}/test-output" />
		<mkdir dir="${build.home}/test/classes" />
		<copy todir="${build.home}/test">
			<fileset dir="test" excludes="java/**"/>
		</copy>

		<javac srcdir="${src.tests}"
			destdir="${build.home}/test/classes"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}"
			source="1.8"
			target="1.8"
			encoding="UTF-8"
			verbose="true">
			<classpath refid="test.classpath"/>
			<compilerarg value="-parameters" />
		</javac>

		<copy todir="${build.home}/test/classes">
			<fileset dir="test/java" excludes="**/*.java"/>
		</copy>

		<junit fork="yes" haltonfailure="true" outputtoformatters="false" forkmode="perBatch">
			<classpath>
				<pathelement location="${build.home}/test/classes"/>
				<pathelement location="${build.home}/WEB-INF/classes"/>

				<fileset dir="${build.home}/WEB-INF/lib">
					<include name="*.jar"/>
				</fileset>

				<fileset dir="${build.home}/test/lib">
					<include name="*.jar"/>
				</fileset>
			</classpath>

			<batchtest todir="${build.home}/test-output" skipNonTests="true">
				<fileset dir="${build.home}/test/classes">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<formatter type="brief" usefile="false" />
		</junit>
	</target>

	<target name="pack-artifacts" depends="prepare">
		<mkdir dir="${build.home}/artifacts" />
		<zip destfile="${build.home}/artifacts/javascript.zip" basedir="${build.home}/data/javascript"/>
		<zip destfile="${build.home}/artifacts/css.zip" basedir="${build.home}/data/css"/>
		<zip destfile="${build.home}/artifacts/cltemplates.zip" basedir="${build.home}/data/cltemplates"/>
	</target>
</project>

